
#include <Servo.h> //include Servo library
Servo servo1;
const int RForward = 0;
const int RBackward = 180;	//constants for motor speed
const int LForward = 180;	//constants for motor speed
const int LBackward = 0;	//constants for motor speed
const int RNeutral = 90;	//constants for motor speed
const int LNeutral = 90; 	//constants for motor speed
const int pingPinF = 7;		//constant for front ping sensor
const int pingPinR = 8;		//constant for right ping sensor
const int pingPinL = 9;		//constant for left ping sensor
int g = 1;					//keeps track of correct room
int room[] = {0, 0, 0, 0};	//array that keeps track of room entrance

const int irPin = 0;  		//Sharp infrared sensor pin
const int dangerThresh = 10; //threshold for obstacles (in cm)
int leftDistance, rightDistance; //distances on either side
Servo leftMotor;			//declare motors
Servo rightMotor; 			//declare motors
long duration; 				//time it takes to recieve PING))) signal


void setup()
{
	Serial.begin(9600);
	rightMotor.attach(11);					// Right wheel attached to pin 11
	leftMotor.attach(10);					// Left wheel attached to pin 10
	pinMode(6, INPUT);                      // Set right whisker pin to input
	pinMode(5, INPUT); 						// Set left whisker pin to input
	pinMode(3,OUTPUT);						// Blue light
	pinMode(2, OUTPUT);						// Green light
	servo1.attach(12);
}

void loop()
{
	
	int angle[] = {0,45,90,135,180};	//sets angles for despenser servo
	servo1.write(0);					//sets servo to 0 deg 
	int lwisk, rwisk;					//constant for left and right whiskers
	float lphoto, rphoto;				//float value for both photosensors
	analogWrite(A1, 1024); 				//turns the lights for phototransister
	analogWrite(A2, 1024); 				//turns the lights for phototransister
	rphoto = volts(A0);					//attaches right photo sensor to Analogue 0
	lphoto = volts(A3);					//attaches left photo sensor to Analogue 3
	//Serial.println(rphoto);			//prints right sensor value
	Serial.println(lphoto);				//prints left sensor value
	delay(1000);						//delays 1 second
	
	while(lphoto <= .015 && rphoto < 0.45) // didnt cross the white line
	{

		int distanceFwd = pingF();		//associates forward ping with forward distance
		int distanceRgh = pingR();		//associates right ping with right distance
		int distanceLft = pingL();		//associates left ping with left distance
		if (distanceFwd > dangerThresh) //if path is clear
		{
			leftMotor.write(LForward);
			rightMotor.write(RForward); //move forward
		}
		else //if path is blocked
		{
			leftMotor.write(LNeutral);
			rightMotor.write(RNeutral);
			delay(100);
			rightDistance = pingR(); //scan to the right
			delay(100);
			leftDistance = pingL(); //scan to the left
			delay(100);
			compareDistance();
		}

		lwisk = whiskers(5); 	//left whisker = pin 5
		rwisk = whiskers(6);	//right whisker = pin 6
		while(lwisk == 0)
		{
			//turn right
			leftMotor.write(LForward);
			rightMotor.write(RBackward);
			lwisk = whiskers(5);
		}
		while(rwisk == 0)
		{
			//turn left
			leftMotor.write(LBackward);
			rightMotor.write(RForward);
			rwisk = whiskers(6);
		}

		rphoto = volts(A0);
		lphoto = volts(A3);
		Serial.println(rphoto);
		Serial.println(lphoto);
		delay(100);
	}
	rightMotor.write(RNeutral);
	leftMotor.write(LNeutral);
	delay(1000);
	Serial.println(rphoto);
	int t=0;
	if (rphoto > .45 && lphoto > .015 )
	{
		leftMotor.write(LNeutral);
		rightMotor.write(RNeutral);
	}
	else if (rphoto > .35)// if the phototransister is reading that the right sensor has found the white line
	{

		while (lphoto < .015 && t<10)
		{
			leftMotor.writeMicroseconds(1500 + 150);
			rightMotor.write(RNeutral); //turn right
			lphoto = volts(A3);
			Serial.println(lphoto);
			delay(100);
			t=t+1;
			if(lphoto > 0.015)
			{
				leftMotor.write(LNeutral);
			}
		}
	}
	else if(lphoto > .015)// if the phototransister is reading that the left sensor has found the white line
	{
		while (rphoto < .45 && t<10)
		{
			
			leftMotor.write(LNeutral);
			rightMotor.writeMicroseconds(1500 - 100); //turn left
			rphoto = volts(A0);
			delay(100);
			t=t+1;
			if(rphoto > .45)
			{
				rightMotor.write(RNeutral);
			}
		}
	}
	int distanceFwd = pingF();
	Serial.println(distanceFwd);
	delay(1000);
	
	
	if (t>9)
	{
	drop_meds(angle[g-1]);
	}
	else if(distanceFwd >=72 && distanceFwd <=87)
	{
		if(room[0]==0)
		{
		drop_meds(angle[g]);
		room[0] = 1;
		g=g+1;
		digitalWrite(3,HIGH);		//Blue light on room 1
		}
		else
		{
			drop_meds(angle[g-1]);
		}
	}
	else if(distanceFwd >=49 && distanceFwd <=51)
	{
		if(room[1]==0)
		{
		drop_meds(angle[g]);
		room[1] = 1;
		g=g+1;
		analogWrite(A5,1023);		//Yellow light room 2
		}
		else
		{
			drop_meds(angle[g-1]);
		}
	}
	else if((distanceFwd>=89&& distanceFwd<=91) ||( distanceFwd>=110 && distanceFwd<=125) )
	{ 
		if(room[2]==0)
		{
		drop_meds(angle[g]);
		room[2] = 1;
		g=g+1;
		analogWrite(A4,1023);	//Red light room 3		
		}
		else
		{
			drop_meds(angle[g-1]);
		}
	}
	else if(distanceFwd >=65 &&distanceFwd <=71 )
	{
		if(room[3]==0)
		{
		drop_meds(angle[g]);
		room[3] = 1;
		g=g+1;
		digitalWrite(2,HIGH);		//Green light room 4
		}
		else
		{
			drop_meds(angle[g-1]);
		}
	}
	else 
	{
		drop_meds(angle[g-1]);
	}
	
}

void compareDistance()
{
	int x;
	x = random(100, 900);
	if (leftDistance > rightDistance) //if left is less obstructed
	{
		leftMotor.write(LBackward);
		rightMotor.write(RForward); //turn left
		delay(x);
	}
	else if (rightDistance > leftDistance) //if right is less obstructed
	{
		leftMotor.write(LForward);
		rightMotor.write(RBackward); //turn right
		delay(x);
	}
	else //if they are equally obstructed
	{
		leftMotor.write(LForward);
		rightMotor.write(RBackward); //turn 180ish degrees
		delay(random(900, 1100));
	}
}

long pingF()
{
	// Send out  Forward PING))) signal pulse
	pinMode(pingPinF, OUTPUT);
	digitalWrite(pingPinF, LOW);
	delayMicroseconds(2);
	digitalWrite(pingPinF, HIGH);
	delayMicroseconds(5);
	digitalWrite(pingPinF, LOW);
	//Get duration it takes to receive echo
	pinMode(pingPinF, INPUT);
	duration = pulseIn(pingPinF, HIGH);
	//Convert duration into distance
	return duration / 29 / 2;
}

long pingR()
{
	// Send out  Right PING))) signal pulse
	pinMode(pingPinR, OUTPUT);
	digitalWrite(pingPinR, LOW);
	delayMicroseconds(2);
	digitalWrite(pingPinR, HIGH);
	delayMicroseconds(5);
	digitalWrite(pingPinR, LOW);
	//Get duration it takes to receive echo
	pinMode(pingPinR, INPUT);
	duration = pulseIn(pingPinR, HIGH);
	//Convert duration into distance
	return duration / 29 / 2;
}

long pingL()
{
	// Send out  Left PING))) signal pulse
	pinMode(pingPinL, OUTPUT);
	digitalWrite(pingPinL, LOW);
	delayMicroseconds(2);
	digitalWrite(pingPinL, HIGH);
	delayMicroseconds(5);
	digitalWrite(pingPinL, LOW);
	//Get duration it takes to receive echo
	pinMode(pingPinL, INPUT);
	duration = pulseIn(pingPinL, HIGH);
	//Convert duration into distance
	return duration / 29 / 2;
}



float whiskers(int x)
{
	byte wLeft = digitalRead(x);
	return wLeft;
}

float volts(int adPin)
{
	return float(analogRead(adPin)) * 5 / 1024;
}

int drop_meds(int i)
{
	leftMotor.write(LForward);
	rightMotor.write(RForward);
	delay(900);
	leftMotor.write(LForward);
	rightMotor.write(RBackward); //turn 180ish degrees
	delay(1100);
	rightMotor.write(RNeutral);
	leftMotor.write(LNeutral);
	servo1.write(i);
	delay(2000);
	leftMotor.write(LForward);
	rightMotor.write(RForward);
	delay(1500);
		int distanceRgh = pingR();
		int distanceLft = pingL();
			int x;
	x = random(100, 500);
	if (leftDistance > rightDistance) //if left is less obstructed
	{
		leftMotor.write(LBackward);
		rightMotor.write(RForward); //turn left
		delay(x);
	}
	else if (rightDistance > leftDistance) //if right is less obstructed
	{
		leftMotor.write(LForward);
		rightMotor.write(RBackward); //turn right
		delay(x);
	}
	
rightMotor.write(RNeutral);
	leftMotor.write(LNeutral);
}